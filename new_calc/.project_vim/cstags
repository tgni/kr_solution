cscope 15 $HOME/worksapce/c/new_calc -q 0000000213 0000026780
	@/home/nitonggui/worksapce/c/new_calc/calc.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<m©h.h
>

4 
	~"°ack.h
"

5 
	~"que.h
"

6 
	~"ˇlc.h
"

8 
	#MAXOP
 100

	)

11 
li°_hód_t
 
	mhód
;

12 
	mty≥
;

13 
	mn
;

14 } 
	ttokí
;

16 
msgq_t
 
	gtokí_que
;

17 
°ack_t
 *
	gdoubÀ_°ack
;

19 
tokí
 *
	$gë_tok
(
ty≥
, 
n
)

21 
tokí
 *
t
;

23 
t
 = 
	`mÆloc
((
tokí
));

24 i‡(!
t
Ë 
NULL
;

26 
t
->
ty≥
 =Åype;

27 
t
->
n
 =Ç;

28  
t
;

29 
	}
}

31 
	$put_tok
(
tokí
 *
t
)

33 
	`‰ì
(
t
);

34 
	}
}

36 
ölöe
 
	$push_tokí
(
ty≥
, 
n
)

38 
tokí
 *
t
 = 
	`gë_tok
(
ty≥
, 
n
);

39 i‡(!
t
) {

40 
	`¥ötf
("getÅoken fail\n");

43 
	`msgq_íq
(&
tokí_que
, 
t
);

44 
	}
}

51 
	$i¶es£q
(
a
, 
b
)

53 i‡(((
a
 ='+' ||á ='-'Ë&& (
b
 == '+' || b == '-'))

54 || ((
a
 ='/' ||á ='*' ||á ='%'Ë&& (
b
 == '/' || b == '*' || b == '%')))

56 i‡((
a
 ='+' ||á ='-'Ë&& (
b
 == '/' || b == '*' || b == '%'))

58 i‡((
a
 ='/' ||á ='*' ||á ='%'Ë&& (
b
 == '+' || b == '-'))

60 i‡(
b
 == '(')

63 
	`¥ötf
("îr‹: invÆidárgs:á:%¯b:%c\n", 
a
, 
b
);

66 
	}
}

68 
	#push_d
(
s
, 
n
Ëdÿ{ 
tmp
 =Ç; 
	`push
(s, (*)&tmp); } 0)

	)

69 
	#p›_d
(
s
Ë(
	`t›
(sË? *((*)
	`p›
(s)Ë: 0.0)

	)

71 
	$ˇlc
()

73 
ty≥
;

74 
tokí
 *
tok
;

75 
°ack_t
 *
ds
 = 
doubÀ_°ack
;

76 
›2
;

77 
i
;

79 
	`¥ötf
(">>");

80 (
tok
 = (
tokí
 *)
	`msgq_deq
(&
tokí_que
))) {

81 i‡(
tok
->
ty≥
 =
NUMBER
) {

82 
	`¥ötf
("%g", 
tok
->
n
);

84 
	`¥ötf
("%c", 
tok
->
ty≥
);

86 
tok
->
ty≥
) {

87 
NUMBER
:

88 
	`push_d
(
ds
, 
tok
->
n
);

91 
	`push_d
(
ds
, 
	`p›_d
(ds) +Öop_d(ds));

94 
›2
 = 
	`p›_d
(
ds
);

95 
	`push_d
(
ds
, 
	`p›_d
(dsË- 
›2
);

98 
	`push_d
(
ds
, 
	`p›_d
(ds) *Öop_d(ds));

101 
›2
 = 
	`p›_d
(
ds
);

102 i‡(
›2
 != 0.0)

103 
	`push_d
(
ds
, 
	`p›_d
(dsË/ 
›2
);

105 
	`¥ötf
("error: zero divisor\n");

108 
›2
 = 
	`p›_d
(
ds
);

109 i‡(
›2
 != 0.0)

110 
	`push_d
(
ds
, 
	`fmod
(
	`p›_d
(ds), 
›2
));

112 
	`¥ötf
("error: zero divisor\n");

115 
	`¥ötf
("unknow¿ty≥: %c\n", 
ty≥
);

118 
	`put_tok
(
tok
);

120 
	`¥ötf
("\n\t%.8g\n", (
›2
 = 
	`p›_d
(
ds
)));

122  
›2
;

123 
	}
}

126 
	#push_c
(
s
, 
n
Ëdÿ{ 
tmp
 =Ç; 
	`push
(s, (*)&tmp); } 0)

	)

127 
	#p›_c
(
s
Ë(
	`t›
(sË? *((*)
	`p›
(s)Ë: 
EOF
)

	)

128 
	#t›_c
(
s
Ë(
	`t›
(sË? *((*È›(s)Ë: 
EOF
)

	)

130 
	$maö
()

132 
°ack_t
 *
cs
;

133 
ty≥
;

134 
›d
;

135 
c
;

136 
s
[
MAXOP
];

138 
cs
 = 
	`¸óã_°ack
((), 
MAXVAL
);

139 i‡(!
cs
) {

140 
	`¥ötf
("create char stack fail\n");

143 
doubÀ_°ack
 = 
	`¸óã_°ack
((), 
MAXVAL
);

144 i‡(!
doubÀ_°ack
) {

145 
	`¥ötf
("create double stack fail\n");

148 
	`msgq_öô
(&
tokí_que
, "tokí que", 0, 
MAXVAL
, 
NULL
);

150 (
ty≥
 = 
	`gë›
(
s
)Ë!
EOF
) {

151 
ty≥
) {

152 
NUMBER
:

153 
	`push_tokí
(
NUMBER
, 
	`©of
(
s
));

156 ((
c
 = 
	`t›_c
(
cs
)Ë!
EOF
Ë&& 
	`i¶es£q
(
ty≥
, c))

157 
	`push_tokí
(
	`p›_c
(
cs
), -1);

158 
	`push_c
(
cs
, 
ty≥
);

161 
	`push_c
(
cs
, 
ty≥
);

164 ((
c
 = 
	`p›_c
(
cs
)Ë!
EOF
) && c != '(')

165 
	`push_tokí
(
c
, -1);

168 (
c
 = 
	`p›_c
(
cs
)Ë!
EOF
)

169 
	`push_tokí
(
c
, -1);

170 
›d
 = 
	`ˇlc
();

175 
	`¥ötf
("îr‹: unknow¿comm™d %s\n", 
s
);

179 
	`di•o£_°ack
(
cs
);

180 
	`di•o£_°ack
(
doubÀ_°ack
);

183 
	}
}

	@/home/nitonggui/worksapce/c/new_calc/calc.h

1 #i‚de‡
__CALC_H__


2 
	#__CALC_H__


	)

4 
	#NUMBER
 '0'

	)

5 
	#MAXVAL
 (100)

	)

	@/home/nitonggui/worksapce/c/new_calc/getch.c

1 
	~<°dio.h
>

3 
	#BUFSIZE
 100

	)

5 
	gbuf
[
BUFSIZE
];

6 
	gbuÂ
 = 0;

8 
	$gëch
()

10  (
buÂ
 > 0Ë? 
buf
[--buÂ] : 
	`gëch¨
();

11 
	}
}

13 
	$ungëch
(
c
)

15 i‡(
buÂ
 > 
BUFSIZE
)

16 
	`¥ötf
("error:Åoo many characters\n");

18 
buf
[
buÂ
++] = 
c
;

19 
	}
}

	@/home/nitonggui/worksapce/c/new_calc/getop.c

1 
	~<°dio.h
>

2 
	~<˘y≥.h
>

3 
	~"ˇlc.h
"

6 
	$gë›
(
s
[])

8 
i
, 
c
;

10 (
s
[0] = 
c
 = 
	`gëch
()) == ' ' || c == '\t')

13 
s
[1] = '\0';

14 i‡(!
	`isdigô
(
c
) && c != '.')

15  
c
;

16 
i
 = 0;

17 i‡(
	`isdigô
(
c
))

18 
	`isdigô
(
s
[++
i
] = 
c
 = 
	`gëch
()))

20 i‡(
c
 == '.')

21 
	`isdigô
(
s
[++
i
] = 
c
 = 
	`gëch
()))

23 
s
[
i
] = '\0';

25 i‡(
c
 !
EOF
)

26 
	`ungëch
(
c
);

28  
NUMBER
;

29 
	}
}

31 
	$put›
(
s
[], )

34 
	}
}

	@/home/nitonggui/worksapce/c/new_calc/list.h

1 #i‚de‡
_LIST_H


2 
	#_LIST_H


	)

5 
	~<°dio.h
>

18 
	sli°_hód
 {

19 
li°_hód
 *
	m√xt
, *
	m¥ev
;

22 
li°_hód
 
	tli°_hód_t
;

24 
	#LIST_HEAD_INIT
(
«me
Ë{ &“ame), &“ameË}

	)

26 
	#LIST_HEAD
(
«me
) \

27 
li°_hód
 
«me
 = 
	`LIST_HEAD_INIT
“ame)

	)

29 
	#INIT_LIST_HEAD
(
±r
) do { \

30 (
±r
)->
√xt
 = (±r); (±r)->
¥ev
 = (ptr); \

31 } 0)

	)

41 
__ölöe__
 
	$__li°_add
(
li°_hód
 * 
_√w
,

42 
li°_hód
 * 
_¥ev
,

43 
li°_hód
 * 
_√xt
)

45 
_√xt
->
¥ev
 = 
_√w
;

46 
_√w
->
√xt
 = 
_√xt
;

47 
_√w
->
¥ev
 = 
_¥ev
;

48 
_¥ev
->
√xt
 = 
_√w
;

49 
	}
}

51 
	#__li°_add
(
_√w
, 
_¥ev
, 
_√xt
) do { \

52 
li°_hód
 *
__√w
 = 
_√w
; \

53 
li°_hód
 *
__¥ev
 = 
_¥ev
; \

54 
li°_hód
 *
__√xt
 = 
_√xt
; \

56 (
__√xt
)->
¥ev
 = (
__√w
); \

57 (
__√w
)->
√xt
 = (
__√xt
); \

58 (
__√w
)->
¥ev
 = (
__¥ev
); \

59 (
__¥ev
)->
√xt
 = (
__√w
); \

60 } 0)

	)

73 
__ölöe__
 
	$li°_add
(
li°_hód
 *
_√w
, li°_hód *
_hód
)

75 
	`__li°_add
(
_√w
, 
_hód
, _hód->
√xt
);

76 
	}
}

78 
	#li°_add
(
_√w
, 
_hód
) do { \

79 
	`__li°_add
(
_√w
, 
_hód
, (_hód)->
√xt
); \

80 } 0)

	)

93 
__ölöe__
 
	$li°_add_èû
(
li°_hód
 *
_√w
, li°_hód *
_hód
)

95 
	`__li°_add
(
_√w
, 
_hód
->
¥ev
, _head);

96 
	}
}

98 
	#li°_add_èû
(
_√w
, 
_hód
) do { \

99 
	`__li°_add
(
_√w
, (
_hód
)->
¥ev
, _head); \

100 } 0)

	)

112 
__ölöe__
 
	$__li°_dñ
(
li°_hód
 * 
_¥ev
,

113 
li°_hód
 * 
_√xt
)

115 
_√xt
->
¥ev
 = 
_¥ev
;

116 
_¥ev
->
√xt
 = 
_√xt
;

117 
	}
}

119 
	#__li°_dñ
(
_¥ev
, 
_√xt
) do { \

120 
li°_hód
 *
__¥ev
 = 
_¥ev
; \

121 
li°_hód
 *
__√xt
 = 
_√xt
; \

123 (
__√xt
)->
¥ev
 = (
__¥ev
); \

124 (
__¥ev
)->
√xt
 = (
__√xt
); \

125 } 0)

	)

135 
__ölöe__
 
	$li°_dñ
(
li°_hód
 *
_íåy
)

137 
	`__li°_dñ
(
_íåy
->
¥ev
, _íåy->
√xt
);

138 
_íåy
->
√xt
 = _íåy->
¥ev
 = 0;

139 
	}
}

141 
	#li°_dñ
(
_íåy
) do { \

142 
	`__li°_dñ
((
_íåy
)->
¥ev
, (_íåy)->
√xt
); \

143 (
_íåy
)->
√xt
 = (_íåy)->
¥ev
 = 0; \

144 } 0)

	)

153 
__ölöe__
 
	$li°_dñ_öô
(
li°_hód
 *
_íåy
)

155 
	`__li°_dñ
(
_íåy
->
¥ev
, _íåy->
√xt
);

156 
	`INIT_LIST_HEAD
(
_íåy
);

157 
	}
}

159 
	#li°_dñ_öô
(
_íåy
) do { \

160 
	`__li°_dñ
((
_íåy
)->
¥ev
, (_íåy)->
√xt
); \

161 
	`INIT_LIST_HEAD
(
_íåy
); \

162 } 0)

	)

171 
__ölöe__
 
	$li°_em±y
(
li°_hód
 *
_hód
)

173  
_hód
->
√xt
 == _head;

174 
	}
}

176 
	#li°_em±y
(
_hód
) \

177 –(
_hód
)->
√xt
 =(_hódË)

	)

181 
__ölöe__
 
	$li°_em±y_⁄e
(
li°_hód
 *
_hód
)

183  
_hód
->
√xt
 =_hód->
¥ev
 && _head->next != _head &&

184 
_hód
->
√xt
->√xà=_hód && _hód->√xt->
¥ev
 == _head;

185 
	}
}

193 
__ölöe__
 
	$li°_•li˚
(
li°_hód
 *
li°
, li°_hód *
hód
)

195 
li°_hód
 *
fú°
 = 
li°
->
√xt
;

197 i‡(
fú°
 !
li°
) {

198 
li°_hód
 *
œ°
 = 
li°
->
¥ev
;

199 
li°_hód
 *
©
 = 
hód
->
√xt
;

201 
fú°
->
¥ev
 = 
hód
;

202 
hód
->
√xt
 = 
fú°
;

204 
œ°
->
√xt
 = 
©
;

205 
©
->
¥ev
 = 
œ°
;

207 
	}
}

209 
	#off£t_of
(
TYPE
, 
MEMBER
Ë((Ë&((TYPE *)0)->MEMBER)

	)

218 
	#c⁄èöî_of
(
±r
, 
ty≥
, 
membî
) \

219 ((
ty≥
 *)((*)(
±r
Ë- ()(&(—y≥ *)0)->
membî
)))

	)

227 
	#li°_íåy
(
±r
, 
ty≥
, 
membî
) \

228 
	`c⁄èöî_of
(
±r
, 
ty≥
, 
membî
)

	)

236 
	#li°_f‹_óch
(
pos
, 
hód
) \

237 
pos
 = (
hód
)->
√xt
;Öos != (head); \

238 
pos
 =Öos->
√xt
)

	)

240 
	#li°_f‹_óch_ªvî£
(
pos
, 
hód
) \

241 
pos
 = (
hód
)->
¥ev
;Öos != (head); \

242 
pos
 =Öos->
¥ev
)

	)

251 
	#li°_f‹_óch_ß„
(
pos
, 
n
, 
hód
) \

252 
pos
 = (
hód
)->
√xt
, 
n
 =Öos->next;Öos != (head); \

253 
pos
 = 
n
,Ç =Öos->
√xt
)

	)

255 
	#li°_f‹_óch_ß„_ªvî£
(
pos
, 
n
, 
hód
) \

256 
pos
 = (
hód
)->
¥ev
, 
n
 =Öos->prev;Öos != (head); \

257 
pos
 = 
n
,Ç =Öos->
¥ev
)

	)

267 
	shli°_hód
 {

268 
hli°_node
 *
	mfú°
;

271 
	shli°_node
 {

272 
hli°_node
 *
	m√xt
, **
	mµªv
;

275 
	#HLIST_HEAD_INIT
 { .
fú°
 = 
NULL
 }

	)

276 
	#HLIST_HEAD
(
«me
Ë
hli°_hód
Çamê{ .
fú°
 = 
NULL
 }

	)

277 
	#INIT_HLIST_HEAD
(
±r
Ë(’å)->
fú°
 = 
NULL
)

	)

278 
ölöe
 
	$INIT_HLIST_NODE
(
hli°_node
 *
h
)

280 
h
->
√xt
 = 
NULL
;

281 
h
->
µªv
 = 
NULL
;

282 
	}
}

284 
ölöe
 
	$hli°_unhashed
(c⁄° 
hli°_node
 *
h
)

286  !
h
->
µªv
;

287 
	}
}

289 
ölöe
 
	$hli°_em±y
(c⁄° 
hli°_hód
 *
h
)

291  !
h
->
fú°
;

292 
	}
}

294 
ölöe
 
	$__hli°_dñ
(
hli°_node
 *
n
)

296 
hli°_node
 *
√xt
 = 
n
->next;

297 
hli°_node
 **
µªv
 = 
n
->pprev;

298 *
µªv
 = 
√xt
;

299 i‡(
√xt
)

300 
√xt
->
µªv
 =Öprev;

301 
	}
}

303 
ölöe
 
	$hli°_dñ
(
hli°_node
 *
n
)

305 
	`__hli°_dñ
(
n
);

306 
n
->
√xt
 = 0;

307 
n
->
µªv
 = 0;

308 
	}
}

310 
ölöe
 
	$hli°_dñ_öô
(
hli°_node
 *
n
)

312 i‡(!
	`hli°_unhashed
(
n
)) {

313 
	`__hli°_dñ
(
n
);

314 
	`INIT_HLIST_NODE
(
n
);

316 
	}
}

318 
ölöe
 
	$hli°_add_hód
(
hli°_node
 *
n
, 
hli°_hód
 *
h
)

320 
hli°_node
 *
fú°
 = 
h
->first;

321 
n
->
√xt
 = 
fú°
;

322 i‡(
fú°
)

323 
fú°
->
µªv
 = &
n
->
√xt
;

324 
h
->
fú°
 = 
n
;

325 
n
->
µªv
 = &
h
->
fú°
;

326 
	}
}

329 
ölöe
 
	$hli°_add_bef‹e
(
hli°_node
 *
n
,

330 
hli°_node
 *
√xt
)

332 
n
->
µªv
 = 
√xt
->pprev;

333 
n
->
√xt
 =Çext;

334 
√xt
->
µªv
 = &
n
->next;

335 *(
n
->
µªv
) =Ç;

336 
	}
}

338 
ölöe
 
	$hli°_add_a·î
(
hli°_node
 *
n
,

339 
hli°_node
 *
√xt
)

341 
√xt
->√xà
n
->next;

342 
n
->
√xt
 =Çext;

343 
√xt
->
µªv
 = &
n
->next;

345 if(
√xt
->next)

346 
√xt
->√xt->
µªv
 = &next->next;

347 
	}
}

353 
ölöe
 
	$hli°_move_li°
(
hli°_hód
 *
ﬁd
,

354 
hli°_hód
 *
√w
)

356 
√w
->
fú°
 = 
ﬁd
->first;

357 i‡(
√w
->
fú°
)

358 
√w
->
fú°
->
µªv
 = &new->first;

359 
ﬁd
->
fú°
 = 
NULL
;

360 
	}
}

362 
	#hli°_íåy
(
±r
, 
ty≥
, 
membî
) \

363 
	`c⁄èöî_of
(
±r
, 
ty≥
, 
membî
)

	)

365 
	#hli°_f‹_óch
(
pos
, 
hód
) \

366 
pos
 = (
hód
)->
fú°
;Öo†;Öo†pos->
√xt
)

	)

368 
	#hli°_f‹_óch_ß„
(
pos
, 
n
, 
hód
) \

369 
pos
 = (
hód
)->
fú°
;Öo†&& ({ 
n
 =Öos->
√xt
; 1; }); \

370 
pos
 = 
n
)

	)

	@/home/nitonggui/worksapce/c/new_calc/que.c

1 
	~"que.h
"

3 
msgq_öô
(
msgq_t
 *
q
, *
«me
, 
öt32_t
 
off£t
, i¡32_à
thd
, (*
dñ
)(*
msg
))

5 
q
->
ƒ
 = 0;

6 
q
->
off£t
 = offset;

7 
q
->
thd
 =Åhd;

8 
q
->
dñ
 = del;

10 
	`INIT_LIST_HEAD
(&
q
->
hód
);

13 
	}
}

15 
	$msgq_föa
(
msgq_t
 *
q
)

18 
	}
}

21 * 
	$msgq_íq
(
msgq_t
 *
q
, *
obj
)

23 *
dr›
 = 
NULL
;

24 
li°_hód_t
 *
pos
;

26 i‡(
q
->
thd
 && q->
ƒ
 >= q->thd) {

27 
dr›
 = 
	`msgq_fú°
(
q
);

28 
	`li°_dñ
(
q
->
hód
.
√xt
);

30 ++
q
->
ƒ
;

33 
pos
 = (
li°_hód_t
 *)(
obj
 + 
q
->
off£t
);

34 
	`li°_add_èû
(
pos
, &
q
->
hód
);

36  
dr›
;

37 
	}
}

40 * 
	$msgq_deq
(
msgq_t
 *
q
)

42 *
obj
;

44 i‡(
	`li°_em±y
(&
q
->
hód
))

45  
NULL
;

47 
obj
 = 
	`msgq_fú°
(
q
);

48 
	`li°_dñ
(
q
->
hód
.
√xt
);

49 --
q
->
ƒ
;

51  
obj
;

52 
	}
}

	@/home/nitonggui/worksapce/c/new_calc/que.h

11 #i‚de‡
_QUE_H


12 
	#_QUE_H


	)

14 
	~"ty≥s.h
"

15 
	~"li°.h
"

28 
	smsgq_s
 {

29 
öt32_t
 
	mƒ
;

30 
öt32_t
 
	moff£t
;

31 
öt32_t
 
	mthd
;

32 
li°_hód
 
	mhód
;

34 (*
	mdñ
)(*
	mobj
);

35 } 
	tmsgq_t
;

37 
	#msgq_fú°
(
q
Ë(*)((*)(q)->
hód
.
√xt
 - (q)->
off£t
)

	)

39 
msgq_öô
(
msgq_t
 *
q
, *
«me
, 
öt32_t
 
off£t
, i¡32_à
thd
, (*
dñ
)(*
msg
));

40 
	`msgq_föa
(
msgq_t
 *
q
);

48 * 
	`msgq_íq
(
msgq_t
 *
q
, *
obj
);

57 * 
	`msgq_deq
(
msgq_t
 *
q
);

60 
__ölöe__
 
öt32_t
 
	$msgq_is_em±y
(
msgq_t
 *
q
)

62  
	`li°_em±y
(&
q
->
hód
);

63 
	}
}

65 
__ölöe__
 *
	$msgq_√xt
(
msgq_t
 *
q
, *
obj
)

67 
li°_hód_t
 *
pos
;

69 
pos
 = (
li°_hód_t
 *)(
obj
 + 
q
->
off£t
);

70  
pos
->
√xt
 !&
q
->
hód
 ? ((*Ìos->√xà- q->
off£t
Ë: 
NULL
;

71 
	}
}

73 
__ölöe__
 
	$msgq_dñ
(
msgq_t
 *
q
, *
obj
)

75 
li°_hód_t
 *
pos
;

77 
pos
 = (
li°_hód_t
 *)(
obj
 + 
q
->
off£t
);

78 
	`li°_dñ_öô
(
pos
);

79 --
q
->
ƒ
;

81 
	}
}

	@/home/nitonggui/worksapce/c/new_calc/stack.c

1 
	~<°dlib.h
>

2 
	~<°rög.h
>

3 
	~<°dio.h
>

4 
	~"°ack.h
"

6 
	#MIN_STACK_SZ
 (5)

	)

7 
	#EMPTY_TOS
 (-1)

	)

9 
	s°ack_s
 {

10 
	mˇp
;

11 
	m•
;

12 
	mesz
;

13 *
	m¨øy
;

16 
°ack_t
 *
	$¸óã_°ack
(
esz
, 
ƒ
)

18 
°ack_t
 *
s
;

20 i‡(
ƒ
 < 
MIN_STACK_SZ
) {

21 
	`¥ötf
("error: stack sizeÅoo small!\n");

22  
NULL
;

25 
s
 = 
	`mÆloc
((
°ack_t
));

26 i‡(!
s
) {

27 
	`¥ötf
("out of memory!\n");

28  
NULL
;

31 
s
->
¨øy
 = 
	`mÆloc
(
esz
 * 
ƒ
);

32 i‡(!
s
->
¨øy
) {

33 
	`¥ötf
("out ofárray memory!\n");

34  
NULL
;

36 
s
->
ˇp
 = 
ƒ
;

37 
s
->
esz
 =Ész;

38 
	`make_em±y
(
s
);

40  
s
;

41 
	}
}

43 
	$di•o£_°ack
(
°ack_t
 *
s
)

45 i‡(
s
) {

46 
	`‰ì
(
s
);

47 
	`‰ì
(
s
->
¨øy
);

49 
	}
}

51 
	$is_fuŒ
(
°ack_t
 *
s
)

53  
s
->
•
 >s->
ˇp
;

54 
	}
}

56 
	$is_em±y
(
°ack_t
 *
s
)

58  
s
->
•
 =
EMPTY_TOS
;

59 
	}
}

61 
	$make_em±y
(
°ack_t
 *
s
)

63 
s
->
•
 = 
EMPTY_TOS
;

64 
	}
}

66 
	$push
(
°ack_t
 *
s
, *
obj
)

68 i‡(
	`is_fuŒ
(
s
)) {

69 
	`¥ötf
("error: full stack\n");

71 
	`mem˝y
((*)(
s
->
¨øy
 + (++s->
•
)*s->
esz
), 
obj
, s->esz);

73 
	}
}

75 *
	$p›
(
°ack_t
 *
s
)

77 i‡(!
	`is_em±y
(
s
))

78  (*)(
s
->
¨øy
 + (s->
•
--)*s->
esz
);

79  
NULL
;

80 
	}
}

82 *
	$t›
(
°ack_t
 *
s
)

84 i‡(!
	`is_em±y
(
s
))

85  (*)(
s
->
¨øy
 + s->
•
*s->
esz
);

86  
NULL
;

87 
	}
}

	@/home/nitonggui/worksapce/c/new_calc/stack.h

1 #i‚de‡
__STACK_H__


2 
	#__STACK_H__


	)

4 
	g°ack_s
;

5 
°ack_s
 
	t°ack_t
;

7 
is_em±y
(
°ack_t
 *
s
);

8 
is_fuŒ
(
°ack_t
 *
s
);

9 
°ack_t
 *
¸óã_°ack
(
esz
, 
ƒ
);

10 
di•o£_°ack
(
°ack_t
 *
s
);

11 
make_em±y
(
°ack_t
 *
s
);

12 
push
(
°ack_t
 *
s
, *
obj
);

13 *
p›
(
°ack_t
 *
s
);

14 *
t›
(
°ack_t
 *
s
);

	@/home/nitonggui/worksapce/c/new_calc/types.h

10 #i‚de‡
_TYPES_H


11 
	#_TYPES_H


	)

14 
	tBOOLEAN
;

15 
	tINT8U
;

16 sig√d 
	tINT8S
;

17 
	tINT16U
;

18 sig√d 
	tINT16S
;

19 
	tINT32U
;

20 sig√d 
	tINT32S
;

21 
	tFP32
;

22 
	tFP64
;

24 
	tINT64S
;

25 
	tINT64U
;

28 
	tul⁄g_t
;

29 
	tuöt32_t
;

30 
	tuöt16_t
;

31 
	tuöt8_t
;

34 
	tl⁄g_t
;

35 
	töt32_t
;

36 
	töt16_t
;

37 sig√d 
	töt8_t
;

40 
	#ht⁄s
(
n
Ë((
uöt16_t
)((“Ë& 0xffË<< 8Ë| ((“Ë& 0xff00Ë>> 8))

	)

41 
	#ht⁄l
(
n
Ë((
uöt32_t
)( \

42 (((
uöt32_t
)(
n
) & (uint32_t)0x000000ffUL) << 24) | \

43 (((
uöt32_t
)(
n
) & (uint32_t)0x0000ff00UL) << 8) | \

44 (((
uöt32_t
)(
n
) & (uint32_t)0x00ff0000UL) >> 8) | \

45 (((
uöt32_t
)(
n
Ë& (uöt32_t)0xff000000ULË>> 24)))

	)

46 
	#¡ohs
(
n
Ë
	`ht⁄s
“)

	)

47 
	#¡ohl
(
n
Ë
	`ht⁄l
“)

	)

50 
	#__i§__


	)

51 
	#__∂c_wq__


	)

52 
	#__tmr__


	)

55 
	#DISPLAY_MSG
 0

	)

57 
	#DISABLE
 0

	)

58 
	#ENABLE
 1

	)

60 
	#MAX
(
a
,
b
Ë(◊Ë>(bË? (aË: (b))

	)

61 
	#MIN
(
a
,
b
Ë(◊Ë<(bË? (aË: (b))

	)

62 
	#US_SWAP
(
a
Ë(◊Ë(
INT16U
)(((INT16U)◊Ë>> 8Ë| ((INT16U)◊Ë<< 8)))

	)

63 
	#mod_˚ûög
(
a
, 
b
Ë((◊Ë+ (bË- 1Ë/ (b))

	)

64 
	#mod_Êo‹
(
a
, 
b
Ë(◊Ë/ (b))

	)

66 #i‚de‡
NULL


67 
	#NULL
 0

	)

70 #i‚de‡
TRUE


71 
	#TRUE
 (1 =1)

	)

74 #i‚de‡
FALSE


75 
	#FALSE
 (!
TRUE
)

	)

78 #i‚de‡
OK


79 
	#OK
 0

	)

82 #i‚de‡
ERROR


83 
	#ERROR
 -1

	)

86 
__ölöe__
 
	$•lô_wrôe_two
(
uöt8_t
 *
addr
, 
uöt16_t
 
two
, uöt8_à
ídün
)

88 
uöt8_t
 
byã0
, 
byã1
;

90 
byã0
 = (
two
 & 0xff);

91 
byã1
 = (
two
 & 0xff00) >> 8;

93 i‡(
ídün
) {

94 *
addr
 = 
byã1
;

95 *(
addr
+1Ë
byã0
;

97 *
addr
 = 
byã0
;

98 *(
addr
+1Ë
byã1
;

102 
	}
}

104 
	#•lô_ªad_two
(
addr
, 
ídün
) \

105 ((
ídün
) ? \

106 (
uöt16_t
)((*(
addr
) << 8) | (*(addr+1))) : \

107 (
uöt16_t
)((*(
addr
)Ë| (*◊ddr+1Ë<< 8)))

	)

109 
__ölöe__
 
	$•lô_wrôe_four
(
uöt8_t
 *
addr
, 
uöt32_t
 
four
, uöt8_à
ídün
)

111 
uöt8_t
 
byã0
, 
byã1
, 
byã2
, 
byã3
;

113 
byã0
 = (
four
 & 0xff);

114 
byã1
 = (
four
 & 0xff00) >> 8;

115 
byã2
 = (
four
 & 0xff0000) >> 16;

116 
byã3
 = (
four
 & 0xff000000) >> 24;

118 i‡(
ídün
) {

119 *
addr
 = 
byã3
;

120 *(
addr
+1Ë
byã2
;

121 *(
addr
+2Ë
byã1
;

122 *(
addr
+3Ë
byã0
;

124 *
addr
 = 
byã0
;

125 *(
addr
+1Ë
byã1
;

126 *(
addr
+2Ë
byã2
;

127 *(
addr
+3Ë
byã3
;

130 
	}
}

133 
	#•lô_ªad_four
(
addr
, 
ídün
) \

134 ((
ídün
) ? \

135 (
uöt32_t
)((*(
addr
) << 24) | (*(addr+1) << 16) | (*(addr+2) << 8) | (*(addr+3))) : \

136 (
uöt32_t
)((*(
addr
)Ë| (*◊ddr+1Ë<< 8Ë| (*◊ddr+2Ë<< 16Ë| (*◊ddr+3Ë<< 24)))

	)

	@calc.h

1 #i‚de‡
__CALC_H__


2 
	#__CALC_H__


	)

4 
	#NUMBER
 '0'

	)

5 
	#MAXVAL
 (100)

	)

	@list.h

1 #i‚de‡
_LIST_H


2 
	#_LIST_H


	)

5 
	~<°dio.h
>

18 
	sli°_hód
 {

19 
li°_hód
 *
	m√xt
, *
	m¥ev
;

22 
li°_hód
 
	tli°_hód_t
;

24 
	#LIST_HEAD_INIT
(
«me
Ë{ &“ame), &“ameË}

	)

26 
	#LIST_HEAD
(
«me
) \

27 
li°_hód
 
«me
 = 
	`LIST_HEAD_INIT
“ame)

	)

29 
	#INIT_LIST_HEAD
(
±r
) do { \

30 (
±r
)->
√xt
 = (±r); (±r)->
¥ev
 = (ptr); \

31 } 0)

	)

41 
__ölöe__
 
	$__li°_add
(
li°_hód
 * 
_√w
,

42 
li°_hód
 * 
_¥ev
,

43 
li°_hód
 * 
_√xt
)

45 
_√xt
->
¥ev
 = 
_√w
;

46 
_√w
->
√xt
 = 
_√xt
;

47 
_√w
->
¥ev
 = 
_¥ev
;

48 
_¥ev
->
√xt
 = 
_√w
;

49 
	}
}

51 
	#__li°_add
(
_√w
, 
_¥ev
, 
_√xt
) do { \

52 
li°_hód
 *
__√w
 = 
_√w
; \

53 
li°_hód
 *
__¥ev
 = 
_¥ev
; \

54 
li°_hód
 *
__√xt
 = 
_√xt
; \

56 (
__√xt
)->
¥ev
 = (
__√w
); \

57 (
__√w
)->
√xt
 = (
__√xt
); \

58 (
__√w
)->
¥ev
 = (
__¥ev
); \

59 (
__¥ev
)->
√xt
 = (
__√w
); \

60 } 0)

	)

73 
__ölöe__
 
	$li°_add
(
li°_hód
 *
_√w
, li°_hód *
_hód
)

75 
	`__li°_add
(
_√w
, 
_hód
, _hód->
√xt
);

76 
	}
}

78 
	#li°_add
(
_√w
, 
_hód
) do { \

79 
	`__li°_add
(
_√w
, 
_hód
, (_hód)->
√xt
); \

80 } 0)

	)

93 
__ölöe__
 
	$li°_add_èû
(
li°_hód
 *
_√w
, li°_hód *
_hód
)

95 
	`__li°_add
(
_√w
, 
_hód
->
¥ev
, _head);

96 
	}
}

98 
	#li°_add_èû
(
_√w
, 
_hód
) do { \

99 
	`__li°_add
(
_√w
, (
_hód
)->
¥ev
, _head); \

100 } 0)

	)

112 
__ölöe__
 
	$__li°_dñ
(
li°_hód
 * 
_¥ev
,

113 
li°_hód
 * 
_√xt
)

115 
_√xt
->
¥ev
 = 
_¥ev
;

116 
_¥ev
->
√xt
 = 
_√xt
;

117 
	}
}

119 
	#__li°_dñ
(
_¥ev
, 
_√xt
) do { \

120 
li°_hód
 *
__¥ev
 = 
_¥ev
; \

121 
li°_hód
 *
__√xt
 = 
_√xt
; \

123 (
__√xt
)->
¥ev
 = (
__¥ev
); \

124 (
__¥ev
)->
√xt
 = (
__√xt
); \

125 } 0)

	)

135 
__ölöe__
 
	$li°_dñ
(
li°_hód
 *
_íåy
)

137 
	`__li°_dñ
(
_íåy
->
¥ev
, _íåy->
√xt
);

138 
_íåy
->
√xt
 = _íåy->
¥ev
 = 0;

139 
	}
}

141 
	#li°_dñ
(
_íåy
) do { \

142 
	`__li°_dñ
((
_íåy
)->
¥ev
, (_íåy)->
√xt
); \

143 (
_íåy
)->
√xt
 = (_íåy)->
¥ev
 = 0; \

144 } 0)

	)

153 
__ölöe__
 
	$li°_dñ_öô
(
li°_hód
 *
_íåy
)

155 
	`__li°_dñ
(
_íåy
->
¥ev
, _íåy->
√xt
);

156 
	`INIT_LIST_HEAD
(
_íåy
);

157 
	}
}

159 
	#li°_dñ_öô
(
_íåy
) do { \

160 
	`__li°_dñ
((
_íåy
)->
¥ev
, (_íåy)->
√xt
); \

161 
	`INIT_LIST_HEAD
(
_íåy
); \

162 } 0)

	)

171 
__ölöe__
 
	$li°_em±y
(
li°_hód
 *
_hód
)

173  
_hód
->
√xt
 == _head;

174 
	}
}

176 
	#li°_em±y
(
_hód
) \

177 –(
_hód
)->
√xt
 =(_hódË)

	)

181 
__ölöe__
 
	$li°_em±y_⁄e
(
li°_hód
 *
_hód
)

183  
_hód
->
√xt
 =_hód->
¥ev
 && _head->next != _head &&

184 
_hód
->
√xt
->√xà=_hód && _hód->√xt->
¥ev
 == _head;

185 
	}
}

193 
__ölöe__
 
	$li°_•li˚
(
li°_hód
 *
li°
, li°_hód *
hód
)

195 
li°_hód
 *
fú°
 = 
li°
->
√xt
;

197 i‡(
fú°
 !
li°
) {

198 
li°_hód
 *
œ°
 = 
li°
->
¥ev
;

199 
li°_hód
 *
©
 = 
hód
->
√xt
;

201 
fú°
->
¥ev
 = 
hód
;

202 
hód
->
√xt
 = 
fú°
;

204 
œ°
->
√xt
 = 
©
;

205 
©
->
¥ev
 = 
œ°
;

207 
	}
}

209 
	#off£t_of
(
TYPE
, 
MEMBER
Ë((Ë&((TYPE *)0)->MEMBER)

	)

218 
	#c⁄èöî_of
(
±r
, 
ty≥
, 
membî
) \

219 ((
ty≥
 *)((*)(
±r
Ë- ()(&(—y≥ *)0)->
membî
)))

	)

227 
	#li°_íåy
(
±r
, 
ty≥
, 
membî
) \

228 
	`c⁄èöî_of
(
±r
, 
ty≥
, 
membî
)

	)

236 
	#li°_f‹_óch
(
pos
, 
hód
) \

237 
pos
 = (
hód
)->
√xt
;Öos != (head); \

238 
pos
 =Öos->
√xt
)

	)

240 
	#li°_f‹_óch_ªvî£
(
pos
, 
hód
) \

241 
pos
 = (
hód
)->
¥ev
;Öos != (head); \

242 
pos
 =Öos->
¥ev
)

	)

251 
	#li°_f‹_óch_ß„
(
pos
, 
n
, 
hód
) \

252 
pos
 = (
hód
)->
√xt
, 
n
 =Öos->next;Öos != (head); \

253 
pos
 = 
n
,Ç =Öos->
√xt
)

	)

255 
	#li°_f‹_óch_ß„_ªvî£
(
pos
, 
n
, 
hód
) \

256 
pos
 = (
hód
)->
¥ev
, 
n
 =Öos->prev;Öos != (head); \

257 
pos
 = 
n
,Ç =Öos->
¥ev
)

	)

267 
	shli°_hód
 {

268 
hli°_node
 *
	mfú°
;

271 
	shli°_node
 {

272 
hli°_node
 *
	m√xt
, **
	mµªv
;

275 
	#HLIST_HEAD_INIT
 { .
fú°
 = 
NULL
 }

	)

276 
	#HLIST_HEAD
(
«me
Ë
hli°_hód
Çamê{ .
fú°
 = 
NULL
 }

	)

277 
	#INIT_HLIST_HEAD
(
±r
Ë(’å)->
fú°
 = 
NULL
)

	)

278 
ölöe
 
	$INIT_HLIST_NODE
(
hli°_node
 *
h
)

280 
h
->
√xt
 = 
NULL
;

281 
h
->
µªv
 = 
NULL
;

282 
	}
}

284 
ölöe
 
	$hli°_unhashed
(c⁄° 
hli°_node
 *
h
)

286  !
h
->
µªv
;

287 
	}
}

289 
ölöe
 
	$hli°_em±y
(c⁄° 
hli°_hód
 *
h
)

291  !
h
->
fú°
;

292 
	}
}

294 
ölöe
 
	$__hli°_dñ
(
hli°_node
 *
n
)

296 
hli°_node
 *
√xt
 = 
n
->next;

297 
hli°_node
 **
µªv
 = 
n
->pprev;

298 *
µªv
 = 
√xt
;

299 i‡(
√xt
)

300 
√xt
->
µªv
 =Öprev;

301 
	}
}

303 
ölöe
 
	$hli°_dñ
(
hli°_node
 *
n
)

305 
	`__hli°_dñ
(
n
);

306 
n
->
√xt
 = 0;

307 
n
->
µªv
 = 0;

308 
	}
}

310 
ölöe
 
	$hli°_dñ_öô
(
hli°_node
 *
n
)

312 i‡(!
	`hli°_unhashed
(
n
)) {

313 
	`__hli°_dñ
(
n
);

314 
	`INIT_HLIST_NODE
(
n
);

316 
	}
}

318 
ölöe
 
	$hli°_add_hód
(
hli°_node
 *
n
, 
hli°_hód
 *
h
)

320 
hli°_node
 *
fú°
 = 
h
->first;

321 
n
->
√xt
 = 
fú°
;

322 i‡(
fú°
)

323 
fú°
->
µªv
 = &
n
->
√xt
;

324 
h
->
fú°
 = 
n
;

325 
n
->
µªv
 = &
h
->
fú°
;

326 
	}
}

329 
ölöe
 
	$hli°_add_bef‹e
(
hli°_node
 *
n
,

330 
hli°_node
 *
√xt
)

332 
n
->
µªv
 = 
√xt
->pprev;

333 
n
->
√xt
 =Çext;

334 
√xt
->
µªv
 = &
n
->next;

335 *(
n
->
µªv
) =Ç;

336 
	}
}

338 
ölöe
 
	$hli°_add_a·î
(
hli°_node
 *
n
,

339 
hli°_node
 *
√xt
)

341 
√xt
->√xà
n
->next;

342 
n
->
√xt
 =Çext;

343 
√xt
->
µªv
 = &
n
->next;

345 if(
√xt
->next)

346 
√xt
->√xt->
µªv
 = &next->next;

347 
	}
}

353 
ölöe
 
	$hli°_move_li°
(
hli°_hód
 *
ﬁd
,

354 
hli°_hód
 *
√w
)

356 
√w
->
fú°
 = 
ﬁd
->first;

357 i‡(
√w
->
fú°
)

358 
√w
->
fú°
->
µªv
 = &new->first;

359 
ﬁd
->
fú°
 = 
NULL
;

360 
	}
}

362 
	#hli°_íåy
(
±r
, 
ty≥
, 
membî
) \

363 
	`c⁄èöî_of
(
±r
, 
ty≥
, 
membî
)

	)

365 
	#hli°_f‹_óch
(
pos
, 
hód
) \

366 
pos
 = (
hód
)->
fú°
;Öo†;Öo†pos->
√xt
)

	)

368 
	#hli°_f‹_óch_ß„
(
pos
, 
n
, 
hód
) \

369 
pos
 = (
hód
)->
fú°
;Öo†&& ({ 
n
 =Öos->
√xt
; 1; }); \

370 
pos
 = 
n
)

	)

	@que.h

11 #i‚de‡
_QUE_H


12 
	#_QUE_H


	)

14 
	~"ty≥s.h
"

15 
	~"li°.h
"

28 
	smsgq_s
 {

29 
öt32_t
 
	mƒ
;

30 
öt32_t
 
	moff£t
;

31 
öt32_t
 
	mthd
;

32 
li°_hód
 
	mhód
;

34 (*
	mdñ
)(*
	mobj
);

35 } 
	tmsgq_t
;

37 
	#msgq_fú°
(
q
Ë(*)((*)(q)->
hód
.
√xt
 - (q)->
off£t
)

	)

39 
msgq_öô
(
msgq_t
 *
q
, *
«me
, 
öt32_t
 
off£t
, i¡32_à
thd
, (*
dñ
)(*
msg
));

40 
	`msgq_föa
(
msgq_t
 *
q
);

48 * 
	`msgq_íq
(
msgq_t
 *
q
, *
obj
);

57 * 
	`msgq_deq
(
msgq_t
 *
q
);

60 
__ölöe__
 
öt32_t
 
	$msgq_is_em±y
(
msgq_t
 *
q
)

62  
	`li°_em±y
(&
q
->
hód
);

63 
	}
}

65 
__ölöe__
 *
	$msgq_√xt
(
msgq_t
 *
q
, *
obj
)

67 
li°_hód_t
 *
pos
;

69 
pos
 = (
li°_hód_t
 *)(
obj
 + 
q
->
off£t
);

70  
pos
->
√xt
 !&
q
->
hód
 ? ((*Ìos->√xà- q->
off£t
Ë: 
NULL
;

71 
	}
}

73 
__ölöe__
 
	$msgq_dñ
(
msgq_t
 *
q
, *
obj
)

75 
li°_hód_t
 *
pos
;

77 
pos
 = (
li°_hód_t
 *)(
obj
 + 
q
->
off£t
);

78 
	`li°_dñ_öô
(
pos
);

79 --
q
->
ƒ
;

81 
	}
}

	@stack.h

1 #i‚de‡
__STACK_H__


2 
	#__STACK_H__


	)

4 
	g°ack_s
;

5 
°ack_s
 
	t°ack_t
;

7 
is_em±y
(
°ack_t
 *
s
);

8 
is_fuŒ
(
°ack_t
 *
s
);

9 
°ack_t
 *
¸óã_°ack
(
esz
, 
ƒ
);

10 
di•o£_°ack
(
°ack_t
 *
s
);

11 
make_em±y
(
°ack_t
 *
s
);

12 
push
(
°ack_t
 *
s
, *
obj
);

13 *
p›
(
°ack_t
 *
s
);

14 *
t›
(
°ack_t
 *
s
);

	@types.h

10 #i‚de‡
_TYPES_H


11 
	#_TYPES_H


	)

14 
	tBOOLEAN
;

15 
	tINT8U
;

16 sig√d 
	tINT8S
;

17 
	tINT16U
;

18 sig√d 
	tINT16S
;

19 
	tINT32U
;

20 sig√d 
	tINT32S
;

21 
	tFP32
;

22 
	tFP64
;

24 
	tINT64S
;

25 
	tINT64U
;

28 
	tul⁄g_t
;

29 
	tuöt32_t
;

30 
	tuöt16_t
;

31 
	tuöt8_t
;

34 
	tl⁄g_t
;

35 
	töt32_t
;

36 
	töt16_t
;

37 sig√d 
	töt8_t
;

40 
	#ht⁄s
(
n
Ë((
uöt16_t
)((“Ë& 0xffË<< 8Ë| ((“Ë& 0xff00Ë>> 8))

	)

41 
	#ht⁄l
(
n
Ë((
uöt32_t
)( \

42 (((
uöt32_t
)(
n
) & (uint32_t)0x000000ffUL) << 24) | \

43 (((
uöt32_t
)(
n
) & (uint32_t)0x0000ff00UL) << 8) | \

44 (((
uöt32_t
)(
n
) & (uint32_t)0x00ff0000UL) >> 8) | \

45 (((
uöt32_t
)(
n
Ë& (uöt32_t)0xff000000ULË>> 24)))

	)

46 
	#¡ohs
(
n
Ë
	`ht⁄s
“)

	)

47 
	#¡ohl
(
n
Ë
	`ht⁄l
“)

	)

50 
	#__i§__


	)

51 
	#__∂c_wq__


	)

52 
	#__tmr__


	)

55 
	#DISPLAY_MSG
 0

	)

57 
	#DISABLE
 0

	)

58 
	#ENABLE
 1

	)

60 
	#MAX
(
a
,
b
Ë(◊Ë>(bË? (aË: (b))

	)

61 
	#MIN
(
a
,
b
Ë(◊Ë<(bË? (aË: (b))

	)

62 
	#US_SWAP
(
a
Ë(◊Ë(
INT16U
)(((INT16U)◊Ë>> 8Ë| ((INT16U)◊Ë<< 8)))

	)

63 
	#mod_˚ûög
(
a
, 
b
Ë((◊Ë+ (bË- 1Ë/ (b))

	)

64 
	#mod_Êo‹
(
a
, 
b
Ë(◊Ë/ (b))

	)

66 #i‚de‡
NULL


67 
	#NULL
 0

	)

70 #i‚de‡
TRUE


71 
	#TRUE
 (1 =1)

	)

74 #i‚de‡
FALSE


75 
	#FALSE
 (!
TRUE
)

	)

78 #i‚de‡
OK


79 
	#OK
 0

	)

82 #i‚de‡
ERROR


83 
	#ERROR
 -1

	)

86 
__ölöe__
 
	$•lô_wrôe_two
(
uöt8_t
 *
addr
, 
uöt16_t
 
two
, uöt8_à
ídün
)

88 
uöt8_t
 
byã0
, 
byã1
;

90 
byã0
 = (
two
 & 0xff);

91 
byã1
 = (
two
 & 0xff00) >> 8;

93 i‡(
ídün
) {

94 *
addr
 = 
byã1
;

95 *(
addr
+1Ë
byã0
;

97 *
addr
 = 
byã0
;

98 *(
addr
+1Ë
byã1
;

102 
	}
}

104 
	#•lô_ªad_two
(
addr
, 
ídün
) \

105 ((
ídün
) ? \

106 (
uöt16_t
)((*(
addr
) << 8) | (*(addr+1))) : \

107 (
uöt16_t
)((*(
addr
)Ë| (*◊ddr+1Ë<< 8)))

	)

109 
__ölöe__
 
	$•lô_wrôe_four
(
uöt8_t
 *
addr
, 
uöt32_t
 
four
, uöt8_à
ídün
)

111 
uöt8_t
 
byã0
, 
byã1
, 
byã2
, 
byã3
;

113 
byã0
 = (
four
 & 0xff);

114 
byã1
 = (
four
 & 0xff00) >> 8;

115 
byã2
 = (
four
 & 0xff0000) >> 16;

116 
byã3
 = (
four
 & 0xff000000) >> 24;

118 i‡(
ídün
) {

119 *
addr
 = 
byã3
;

120 *(
addr
+1Ë
byã2
;

121 *(
addr
+2Ë
byã1
;

122 *(
addr
+3Ë
byã0
;

124 *
addr
 = 
byã0
;

125 *(
addr
+1Ë
byã1
;

126 *(
addr
+2Ë
byã2
;

127 *(
addr
+3Ë
byã3
;

130 
	}
}

133 
	#•lô_ªad_four
(
addr
, 
ídün
) \

134 ((
ídün
) ? \

135 (
uöt32_t
)((*(
addr
) << 24) | (*(addr+1) << 16) | (*(addr+2) << 8) | (*(addr+3))) : \

136 (
uöt32_t
)((*(
addr
)Ë| (*◊ddr+1Ë<< 8Ë| (*◊ddr+2Ë<< 16Ë| (*◊ddr+3Ë<< 24)))

	)

	@
1
.
0
15
479
/home/nitonggui/worksapce/c/new_calc/calc.c
/home/nitonggui/worksapce/c/new_calc/calc.h
/home/nitonggui/worksapce/c/new_calc/getch.c
/home/nitonggui/worksapce/c/new_calc/getop.c
/home/nitonggui/worksapce/c/new_calc/list.h
/home/nitonggui/worksapce/c/new_calc/que.c
/home/nitonggui/worksapce/c/new_calc/que.h
/home/nitonggui/worksapce/c/new_calc/stack.c
/home/nitonggui/worksapce/c/new_calc/stack.h
/home/nitonggui/worksapce/c/new_calc/types.h
calc.h
list.h
que.h
stack.h
types.h
